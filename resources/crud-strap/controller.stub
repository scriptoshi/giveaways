<?php
namespace DummyNamespace ;
use DummyRootNamespaceHttp\Controllers\Controller;
use DummyRootNamespace{{modelNamespace}}{{modelName}};
use Illuminate\Http\Request;
use Yajra\Datatables\Datatables;
use JsValidator;
{{useItems}}
class DummyClass extends Controller
{
	
	
    /**
     * Display a listing of the resource. (uses ajax table)
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
		return view('{{viewPath}}{{viewName}}.index');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
		$this->authorize('create', {{modelName}}::class);
		{{jsvalidator}}
		{{relatedModels}}
        return view('{{viewPath}}{{viewName}}.create',compact('jsvalidator'{{relatedModelsItems}}));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
		$this->authorize('create', {{modelName}}::class);
        {{validationRules}}
        {{fileSnippet}}
        ${{crudNameSingular}} = new  {{modelName}};
{{saveable}}
		return response()->json(['status' => 'SUCCESS','message' => __('{{modelName}} Added Successfully')]);

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function show({{modelName}} ${{crudNameSingular}})
    {
		
       // ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
        return view('{{viewPath}}{{viewName}}.show', compact('{{crudNameSingular}}'{{relatedModelsItems}}));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function edit(Request $request, {{modelName}} ${{crudNameSingular}})
    {
		$this->authorize('update', ${{crudNameSingular}});
        //${{crudNameSingular}} = {{modelName}}::findOrFail($id);
		//add the jsvalidator
		{{jsvalidator}}
		{{relatedModels}}
        return view('{{viewPath}}{{viewName}}.edit', compact('{{crudNameSingular}}', '{{relatedModelsItems}}', 'jsvalidator'{{relatedModelsItems}}));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update(Request $request, {{modelName}} ${{crudNameSingular}})
    {
		$this->authorize('update', ${{crudNameSingular}});
        {{validationRules}}
        $requestData = $request->all();
        {{fileSnippet}}
        //${{crudNameSingular}}->update($requestData);
{{saveable}}
		return response()->json(['status' => 'SUCCESS','message' => __('{{modelName}} Updated Successfully' )]);
     
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy(Request $request, {{modelName}} ${{crudNameSingular}})
    {
		$this->authorize('delete', ${{crudNameSingular}});
		${{crudNameSingular}}->delete();
		return response()->json(['status' => 'SUCCESS','message' => __('{{modelName}} Deleted Successfully')]);

    }
	
	  /**toggle Item status.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function toggle_status(Request $request, {{modelName}} ${{crudNameSingular}})
    {
		$this->authorize('update', ${{crudNameSingular}});
		${{crudNameSingular}}->active = ${{crudNameSingular}}->active? false:true;
		${{crudNameSingular}}->save();
		$action= ${{crudNameSingular}}->active ?  __('Activated'): __('Deactivated');
		
		return response()->json(['status' => 'SUCCESS','message' => __('{{modelName}} '.$action.' Successfuly')]);
       
    }
	
	/**
     * Remove the specified resources from storage.
     *
     * @param  Request  $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function delete(Request $request)
    {
		
		if(!count($request->ids))
		return response()->json(['status' => 'SUCCESS','message' => __('Nothing Selected')]);
		${{crudName}} = {{modelName}}::findMany($request->ids);
		foreach (${{crudName}} as ${{crudNameSingular}} ){
			$this->authorize('delete', ${{crudNameSingular}});
		}
        {{modelName}}::destroy($request->ids);
		return response()->json(['status' => 'SUCCESS','message' => __('All Selected Items Have Been Deleted')]);
    }
	
	  /**toggle Item status.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function toggle_statuses(Request $request)
    {
		if(!count($request->ids))
		return response()->json(['status' => 'SUCCESS','message' => __('Nothing Selected')]);
		${{crudName}} = {{modelName}}::findMany($request->ids);
		foreach (${{crudName}} as ${{crudNameSingular}} ){
			$this->authorize('delete', ${{crudNameSingular}});
		}
        {{modelName}}::whereIn('id', $request->ids)->update(['active'=>$request->status]);
		$action= $request->status == 1 ?  __('Activated'): __('Deactivated');
		return response()->json(['status' => 'SUCCESS','message' => __('{{modelName}} '.$action.' Successfully')]);
    }
	
	/**
     * Get the Table.
     *
     * 
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
	 public function table(){
		 ${{crudNameSingular}} = {{modelName}}::query();
		$table = Datatables::of(${{crudNameSingular}})
			->rawColumns(['active','id','actions'])
			->setRowId(function ($item) {
				return $item->id ;
			})
			->editColumn('id', function ($item) {
				return '<input name="ids[]" class="chkbx" type="checkbox" value="'.$item->id.'"/>';
			})
			->editColumn('active', function ($item) {
				$name = __('Inactive');
				$label = 'danger';
				if($item->active){
					$name = __('Active');;
					$label = 'success';
				}
				return '<a data-table="{{modelName}}" class="ajax_link refresh btn btn-sm btn-'.$label.'" href="'.route('{{routePrefix}}.{{crudName}}.toggle_status', $item->id).'" data-toggle="tooltip" title="'.__('Edit').'"> '.$name.' </a>';
	
			})
			->addColumn('actions', function ($item) {
				 return'<a href="'.route('{{routePrefix}}.{{crudName}}.edit', $item->id) .'" title="'.__('Edit').' {{modelName}}"><button class="btn btn-primary btn-sm"><i class="fa fa-pencil" aria-hidden="true"></i> '.__('Edit').'</button></a>
				 <a href="'.route('{{routePrefix}}.{{crudName}}.destroy' , $item->id) .'"  data-_method="DELETE"  data-title="Please Confirm Delete" data-message="Do your really want to Delete this {{modelName}}? This Action cannot be reversed" data-table="{{modelName}}" class="ajax_link refresh mr-2 confirm btn btn-danger btn-sm" title="'.__('Delete').'{{modelName}}" ><i class="fa fa-trash" aria-hidden="true"></i></a>';
			}) ;
      
      return $table->toJson();
	}
}
